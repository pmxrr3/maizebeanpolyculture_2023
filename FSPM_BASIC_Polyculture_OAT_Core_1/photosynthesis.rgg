import static java.lang.Math.*;
import static parameters.*;


// code below adapted from Leaf project by A. Morales


/*

Simple light response curves

*/

// Non-rectangular hyperbola as described by Thornley
class Thornley {
	
	double theta = 0.7;
	
	double calc(double PAR, double Amax, double alpha) {
		double a = theta;
		double b = -(alpha*PAR + Amax);
		double c = alpha*PAR*Amax;
		return (-b - sqrt(pow(-b,2) - 4*a*c))/(2*a);
}
	
}



/*

Farquhar-von Caemmerer-Berry model as in Yin and Struik (2009)

*/

// Functions used to calculate effect of temperature on parameters
private static double peaked25(double p25, double Ep, double Sp, double Hdp, double Tleaf) {
  return p25*exp((Tleaf - 298.15)*Ep/(298.15*8.31e-3*Tleaf))*(1 + exp((298.15*Sp - Hdp)/(8.31e-3*298.15)))/(1 + exp((Tleaf*Sp - Hdp)/(8.31e-3*Tleaf)));
}

private static double arrhenius25(double p25, double Ep, double Tleaf) {
  return p25*exp((Tleaf - 298.15)*Ep/(298.15*8.31e-3*Tleaf));
}

// Analytical solution of cubic equation due to coupling of A, gs and gm
private static double CalcAnC3(double gm, double gs0, double fvpd, double gb,
                        double x2, double x1, double gamma_star, double Rd,
                        double Ca) {
  double a = gs0*(x2 + gamma_star) + (gs0/gm + fvpd)*(x1 - Rd);
  double b = Ca*(x1 - Rd) - gamma_star*x1 - Rd*x2;
  double c = Ca + x2 + (1/gm + 1/gb)*(x1 - Rd);
  double d = x2 + gamma_star + (x1 - Rd)/gm;
  double m = 1/gm + (gs0/gm + fvpd)*(1/gm + 1/gb);
  double p = -(d + (x1 - Rd)/gm + a*(1/gm + 1/gb) + (gs0/gm + fvpd)*c)/m;
  double q = (d*(x1 - Rd) + a*c + (gs0/gm + fvpd)*b)/m;
  double r = (-a*b)/m;
  double U = (2*pow(p,3) - 9*p*q + 27*r)/54.0;
  double Q = (pow(p,2) - 3*q)/9.0;
  double psi = acos(U/sqrt(pow(Q,3)));
  double A = -2*sqrt(Q)*cos(psi/3) - p/3;
  return A;
}

private static double CalcAnC4(double fvpd, double gs0, double gb, double Ca,
                        double Cs_star,  double gamma_star,  double Rd,
                        double alpha,  double x3,  double x2,
                        double x1,  double gbs,  double Rm,
                        double O2,  double a,  double b) {
                          
  double d = gs0*Ca - gs0*Cs_star + fvpd*Rd;
  double m = fvpd - gs0/gb;
  double g = (b - Rm - gamma_star*O2*gbs)*x1*m - ((alpha*gamma_star)/0.047 + 1)*x1*d + a*gbs*x1*(Ca*m - d/gb - Ca + Cs_star);
  double f = (b - Rm - gamma_star*O2*gbs)*x1*d + a*gbs*x1*Ca*d;
  double h = -(((alpha*gamma_star)/0.047 + 1)*x1*m + (a*gbs*x1*(m - 1))/gb);
  double i = (b - Rm + gbs*x3 + x2*gbs*O2)*d + a*gbs*Ca*d;
  double j = (b - Rm + gbs*x3 + x2*gbs*O2)*m + ((alpha*x2)/0.047 - 1)*d + a*gbs*(Ca*m - d/gb - Ca + Cs_star);
  double l = ((alpha*x2)/0.047 - 1)*m - (a*gbs*(m - 1))/gb;
  double p = (j - h + l*Rd)/l;
  double q = (i + j*Rd - g)/l;
  double r = -(f - i*Rd)/l;
  double Q = (pow(p,2) - 3*q)/9;
  double U = (2*pow(p,3) - 9*p*q + 27*r)/54;
  double Psi = acos(U/sqrt(pow(Q,3)));
  double An = -2*sqrt(Q)*cos((Psi + 4*pi)/3) - p/3;
  return An;
}

private static double CalcCi(double gs0, double An, double Ca,
                             double Ci_star, double Rd, double fvpd) {
  double a = gs0;
  double b = An - gs0*Ca - gs0*Ci_star + (An + Rd)*fvpd;
  double c = -An*Ci_star + gs0*Ca*Ci_star - (An + Rd)*Ca*fvpd;
  double Ci = (-b + sqrt(pow(b,2) - 4*a*c))/(2*a);
  return Ci;
}

// Constants use in different calculations
final static double pi = 3.14159265359;
final static double Pair = 101; // kPa
final static double emmisivity = 0.95;
final static double boltzmann = 5.67e-8; // J/m2/s/K4
final static double vap_heat_a = 56.897e3; // kJ/mol
final static double vap_heat_b = -0.043e3; // kJ/mol/K
final static double forcedA = 0.60;
final static double forcedn = 0.5;
final static double freeB = 0.5;
final static double freem = 0.25;
final static double diff = 20e-6; // m2/s
final static double visc = 15e-6; // m2/s
final static double Grcoef = 1.577e8; // 1/K/m3
final static double R = 8.31; // J/mol/K
final static double es0 = 0.61078; // kPa
final static double es_k = 17.269;
final static double Tzero = 273.15; // K
final static double es_Tref = 237.3; // K
final static double air_heat_capacity = 1200; // J/m3/K


// C3 photosynthesis as described by Yin and Struik (2009) -> no energy balance
class YinC3 {

  // Parameters
  double Sco25 = 2800;
  double E_Sco = -24.46;
  double Kmc25 = 270;
  double E_Kmc = 80.99;
  double Kmo25 = 165000;
  double E_Kmo = 23.72;
  double theta = 0.7;
  double k2ll_a = 0.044;	// values for linear relation between k2ll and leaf N (from Yin et al 2009 PCE)
  double k2ll_b = 0.205;	//
  double fpseudo = 0.1;
  double fcyc = 0.131;
  double a1 = 0.9;
  double b1 = 0.15;
  double Vcmax25_a = 30.40;	// values for linear relation between Vcmax25 and leaf N (from Yin et al 2009 PCE)
  double Vcmax25_b = 4.36;	//
  double E_Vcmax = 65.33;
  double Jmax25_a = 99.38;	// values for linear relation between Jmax25 and leaf N (from Yin et al 2009 PCE)
  double Jmax25_b = 5.75;	//
  double E_Jmax = 30;
  double D_Jmax = 200;
  double S_Jmax = 0.65;
  double Rd25 = 1.2;
  double E_Rd = 46.39;
  double gm25 = 0.4;
  double E_gm = 49.6;
  double D_gm = 437.4;
  double S_gm = 1.4;
  double gs0 = 0.01;
  double gb = 1.5;
  double TPU25_a = 5.367;	// values for linear relation between TPU25 and leaf N (from Yin et al 2009 PCE)
  double TPU25_b = 0.93;	//
  double E_TPU = 53.1;
  double D_TPU = 20.18;
  double S_TPU = 0.65;


  // Calculate net photosynthesis
  double[] calc(double PAR, double Ca, double Tleaf, double VPD, double O2, double LN) {

  	// Calculate values of parameters at leafN
  	double k2ll = k2ll_a*LN + k2ll_b;
  	double Vcmax25 = Vcmax25_a*LN + Vcmax25_b;
  	double Jmax25 = Jmax25_a*LN + Jmax25_b;
  	double TPU25 = TPU25_a*LN + TPU25_b;

    // Need Kelvin for temperature responses
    Tleaf = Tleaf + 273.15;

    // Calculate values of parameters at Tleaf
    double Rd = arrhenius25(Rd25, E_Rd, Tleaf);
    double Sco = arrhenius25(Sco25, E_Sco, Tleaf);
    double Vcmax = arrhenius25(Vcmax25, E_Vcmax, Tleaf);
    double Kmc = arrhenius25(Kmc25, E_Kmc, Tleaf);
    double Kmo = arrhenius25(Kmo25, E_Kmo, Tleaf);
    double Jmax = peaked25(Jmax25, E_Jmax, S_Jmax, D_Jmax, Tleaf);
    double TPU = peaked25(TPU25, E_TPU, S_TPU, D_TPU, Tleaf);
    double gm = peaked25(gm25, E_gm, S_gm, D_gm, Tleaf);

    // Parameters for CO2 diffusion
    double fvpd = max(1/(1/(a1 - b1*VPD) - 1),0.0);
    double gamma_star = 0.5*O2/Sco;
    double  Ci_star = gamma_star - Rd/gm;

    // Limitation by Rubisco
    double x1_c = Vcmax;
    double x2_c = Kmc*(1 + O2/Kmo);
    double  Ac = CalcAnC3(gm, gs0, fvpd, gb, x2_c, x1_c, gamma_star, Rd, Ca);

    // Limitation by electron transport
    double J = (k2ll*PAR + Jmax - sqrt(pow(k2ll*PAR + Jmax,2) - 4*theta*k2ll*Jmax*PAR))/(2*theta);
    double x1_j = (J/4.0)*(1 - fpseudo/(1 - fcyc));
    double x2_j = 2*gamma_star;
    double  Aj = CalcAnC3(gm, gs0, fvpd, gb, x2_j, x1_j, gamma_star, Rd, Ca);

    // Limitation by TPU
    double x1_p = 3.0*TPU;
    double x2_p = -gamma_star;
    double Ap = 3*TPU - Rd;

    // Minimum of three potential rates
    double  An = min(Ac,min(Aj,Ap));

    // Transpiration
    double Ag = An + Rd;
    double Ci = CalcCi(gs0, An, Ca, Ci_star, Rd, fvpd);
    double Cc = Ci - An/gm;
    double gs = gs0 + ((An + Rd)/(Ci - Ci_star))*fvpd;
    double Tr = (gs*1.56*VPD)/Pair;
    double WUE = An/Tr;

    double[] out = {An, Tr, Ag, gs};
    return out; 
  }
}

// C4 photosynthesis as described by Yin and Struik (2009) -> no energy balance
class YinC4 {

  // Parameters
   double Sco25 = 2590;
   double E_Sco = -24.46;
   double Kmc25 = 650;
   double E_Kmc = 79.43;
   double Kmo25 = 450000;
   double E_Kmo = 36.38;
   double theta = 0.7;
   double k2ll_a = k2ll_a_SA;	// svalues for linear relation between k2ll and leaf N (from Yin et al 2009 PCE)
   double k2ll_b = k2ll_b_SA;	// values set in parameters.rgg for senstivity analysis.
   double a1 = 0.85;
   double b1 = 0.2;
   double Vcmax25_a = Vcmax25_a_SA;// values for linear relation between Vcmax25 and leaf N (from Yin et al 2009 PCE)
   double Vcmax25_b = Vcmax25_b_SA;	// values set in parameters.rgg for senstivity analysis.
   double E_Vcmax = 67.30;
   double x = 0.4;
   double alpha = 0.1;
   double Jmax25_a = Jmax25_a_SA;	// values for linear relation between Jmax25 and leaf N (from Yin et al 2009 PCE)
   double Jmax25_b = Jmax25_b_SA;	// values set in parameters.rgg for senstivity analysis.
   double E_Jmax = 48;
   double D_Jmax = 200;
   double S_Jmax = 0.63;
   double fQ = 1;
   double h = 3;
   double fpseudo = 0.1;
   double kp25 = 0.7;
   double E_kp = 46.39;
   double Rd25 = Rd25_SA;		// values set in parameters.rgg for senstivity analysis.
   double E_Rd = 46.39;
   double gbs = 0.003;
   double gs0 = 0.01;
   double gb = 1.5;
   double TPU25_a = TPU25_a_SA;	// values for linear relation between TPU25 and leaf N (from Yin et al 2009 PCE)
   double TPU25_b = TPU25_b_SA;	// NB Of the parameters Jmax25, Vcmax25, k2ll and TPU25, the latter was the only one differing between C3 and C4 (12 vs 20)
   							// so this TPU-N relationship is probably only valid for C3
   double E_TPU = 53.1;
   double D_TPU = 20.18;
   double S_TPU = 0.65;

  // Calculate net photosynthesis
  double[] calc(double PAR, double Ca, double Tleaf, double VPD, double O2, double LN) {

  	// Calculate values of parameters at leafN
  	double fcyc = 1.0 - (4.0*(1.0 - x)*(1.0 + fQ) + 3.0*h*fpseudo)/(3.0*h - 4.0*(1 - x));
    double k2ll = (k2ll_a*LN + k2ll_b)*(1 - fpseudo/(1 - fcyc));
  	double Vcmax25 = Vcmax25_a*LN + Vcmax25_b;
  	double Jmax25 = Jmax25_a*LN + Jmax25_b;
  	double TPU25 = TPU25_a*LN + TPU25_b;

    // Need Kelvin for temperature responses
    Tleaf = Tleaf + 273.15;

    // Calculate values of parameters at Tleaf
    double Rd = arrhenius25(Rd25, E_Rd, Tleaf);
    double Rm = 0.5*Rd;
    double Sco = arrhenius25(Sco25, E_Sco, Tleaf);
    double gamma_star = 0.5*O2/Sco;
    double Vcmax = arrhenius25(Vcmax25, E_Vcmax, Tleaf);
    double Kmc = arrhenius25(Kmc25, E_Kmc, Tleaf);
    double Kmo = arrhenius25(Kmo25, E_Kmo, Tleaf);
    double kp = arrhenius25(kp25, E_kp, Tleaf);
    double Jmax = peaked25(Jmax25, E_Jmax, S_Jmax, D_Jmax, Tleaf);
    double TPU = peaked25(TPU25, E_TPU, S_TPU, D_TPU, Tleaf);

    // Parameters related to CO2 diffusion
    double fvpd = max(1.0/(1.0/(a1 - b1*VPD) - 1.0),0.0);
    double Ci_star = (gbs*gamma_star*O2 - Rd*(1.0 + (gamma_star*alpha)/0.047) + Rm)/(gbs + kp);

    // Common parameters
    double J = (k2ll*PAR + Jmax - sqrt(pow(k2ll*PAR + Jmax,2) - 4*theta*k2ll*Jmax*PAR))/(2*theta);
    double z = (2.0 + fQ - fcyc)/(h*(1 - fcyc));
    double Cs_star = Ci_star;

    // Rubisco limited photosynthesis
    double x1_c1 = Vcmax;
    double x2_c1 = Kmc/Kmo;
    double x3_c1 = Kmc;
    double a_c1 = 1 + kp/gbs;
    double b_c1 = 0.0;
    double x1_c2 = Vcmax;
    double x2_c2 = Kmc/Kmo;
    double x3_c2 = Kmc;
    double VpJ2 = (x*J*z)/2.0;
    double b_c2 = VpJ2;
    double Ac1 = CalcAnC4(fvpd, gs0, gb, Ca, Cs_star, gamma_star, Rd, alpha, x3_c1, x2_c1, x1_c1, gbs, Rm, O2, a_c1, b_c1);
    double Ac2 = CalcAnC4(fvpd, gs0, gb, Ca, Cs_star, gamma_star, Rd, alpha, x3_c2, x2_c2, x1_c2, gbs, Rm, O2, 1.0, b_c2);
    double Ac = min(Ac1, Ac2);

    // Electron transport limited photosynthesis
    double x1_j1 = ((1 - x)*J*z)/3.0;
    double x2_j1 = (7.0*gamma_star)/3.0;
    double x3_j1 = 0.0;
    double a_j1 = 1.0 + kp/gbs;
    double b_j1 = 0.0;
    double x1_j2 = ((1 - x)*J*z)/3.0;
    double x2_j2 = (7*gamma_star)/3.0;
    double x3_j2 = 0.0;
    double b_j2 = VpJ2;
    double Aj1 = CalcAnC4(fvpd, gs0, gb, Ca, Cs_star, gamma_star, Rd, alpha, x3_j1, x2_j1, x1_j1, gbs, Rm, O2, a_j1, b_j1);
    double Aj2 = CalcAnC4(fvpd, gs0, gb, Ca, Cs_star, gamma_star, Rd, alpha, x3_j2, x2_j2, x1_j2, gbs, Rm, O2, 1.0, b_j2);
    double Aj = min(Aj1, Aj2);

    // TPU Limitation
    double Ap = 3*TPU - Rd;

    // Net rate of photosynthesis
    double An = min(Ac, min(Aj, Ap));
    double Ag = An + Rd;

    // Transpiration
    double gs = gs0 + fvpd*Ag/(Ca - An/gb - Cs_star);
    double Ci = Ca - An*(1/gs + 1/gb);
    double Vpep;
    if(An < min(Ac2,Aj2)) {
      Vpep = kp*Ci;
    } else {
      Vpep = VpJ2;
    }
    double Cc = Ci + (Vpep - An - Rm)/gbs;
    double Tr = (gs*1.56*VPD)/Pair;
    double WUE = An/Tr;

    double[] out = {An, Tr, Ag, gs};
    return out;
  }
}